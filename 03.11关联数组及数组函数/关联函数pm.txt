concat()
作用：拼接两个或者更多的数组，并返回拼接后的结果
语法：var res=数组对象.concat(数组一，数组2...);
注意：1.concat不会改变原有的数组，而是改变新数组
         2.要拼接的数据可以是数组，也可以是普通数据

2.slice()
作用：截取子数组，从指定的数组中，截取几个链接的元素组成一个新的数组
语法：var arr=数组名.slice(start,[end]);
start:从哪个下标位置处开始截取，取值为正从前往后算
                                     取值为负，从后往前算
                            0                1                2                 3
	var arr=["白蛇缘起","奇幻森林","疯狂动物城","流浪地球"];
	                    -4              -3             -2                -1
	end：指定结束位置处的下标（不包含），该参数可以省略，
	         如果省略的话，就是从start开始一直截取到尾
        注意：该函数不会影响现有数组，会返回一个新的数组
3.splice()
作用：允许从指定数组中，删除一部分元素，同时添加一部分元素
语法：arr.splice(start,count,e1,e2...)
start：指定要添加或删除元素的起始下标位置
count：指定要删除元素的个数，取值为0，表示不删除
e1：要添加的新元素
...
返回值：返回一个有删除元素所组成的新数组
注意：该函数会改变现有数组

4.reverse()
作用：将一个数组反转
语法：.reverse();
注意：该数组会改变当前数组的内容

5.sort()
作用：排序，默认情况下按照数组元素的Unicode码进行升序排序
语法：数组名.sort();
注意：该函数会改变当前数组的内容
特殊情况：
        允许自定义排序函数，从而实现对数字的升序或降序的排序
语法：数组名.sort(排序函数);

排序函数（升序）：
   function sortUp(a,b){
      return a-b;
      }
             (降序）
   function sortDown(a,b){
      return b-a;
      }

 原理：
 1.指定排序函数，sortUp，定义两个参数，表示的是相邻的两个数字
 2.将排序函数指定给数组的sort()方法，数组就会自动传递数据到sortUp中
   如果返回值>0，则交换两个数字的位置，否则不变

6.匿名函数：没有名称的函数
     只用一次的函数
     升序的匿名函数
     arr.sort(function(a,b){return a-b})
     降序的匿名函数
     arr.sort(function(a,b){return b-a})